using System;
using System.Collections.Generic;
using System.Text;

using WolfRpc.Analyzer.CodeGen.Methods;
using WolfRpc.Analyzer.CodeGen.Source;
using WolfRpc.Analyzer.Extensions;

namespace WolfRpc.CodeGen;

public class ServiceHandler : SourceBlock
{
    public string Name { get; set; } = "";

    public string Namespace { get; set; } = "";

    public string FullName
    {
        get
        {
            if (Namespace != "")
            {
                return Namespace + "." + Name;
            }
            return Name;
        }
    }

    public string FileName
    {
        get
        {
            if (Namespace != "")
            {
                return Namespace + "." + Name + "." + CleanName + "Handler.g.cs";
            }
            return Name + "." + CleanName + "Handler.g.cs";
        }
    }
    
    public string CleanName
    {
        get
        {
            if (!Name.StartsWith("I"))
            {
                return Name;
            }

            var next = Name.Substring(1, 1);
            if (next!.Length > 0)
            {
                if (next.ToUpper() == next)
                {
                    return Name.Substring(1);
                }
            }

            return Name;
        }
    }

    public MethodList Methods { get; set; } = new();

    public List<string> Namespaces = new();

    private string GenerateImports()
    {
        return String.Join("\r\n", Namespaces.Select(ns => $"using {ns};").ToArray());
    }

    private string GenerateNamespaceBegin()
    {
        return Namespace == "" ? "Generated" : $"namespace {Namespace}.Generated\r\n{{";
    }

    private string GenerateNamespaceEnd()
    {
        return "}\r\n";
    }

    public override string ToSource()
    {
        return $@"// <auto-generated />
using System;

using WolfRpc;
using WolfRpc.Services;
using WolfRpc.Abstractions;

{GenerateImports()}

{GenerateNamespaceBegin()}
    public abstract class {CleanName}Handler : WolfRpc.Service<{FullName}>, {FullName}
    {{
        public override ulong Id => {FullName.Hash()};

{Methods.ToSource(2)}

        public override async Task<IInvokeResponse> InvokeAsync(IInvokeRequest invoke)
        {{
            if (invoke.Service != this.Id)
            {{
                throw new InvalidOperationException(""Service mismatch"");
            }}

            var valid = invoke.Method switch 
            {{
{Methods.ToValidateArgumentCount("invoke.Arguments.Length", 4)},
                _ => throw new InvalidOperationException(""Unknown service method""),
            }};

            if (!valid)
            {{
                throw new InvalidOperationException(""Argument count mistmatch"");
            }}

            Task task = invoke.Method switch
            {{
{Methods.ToSwitchCall("invoke.Arguments", 4)},
                _ => Task.FromException(new InvalidOperationException(""Unknown service method""))
            }};

            try
            {{
                await task;
                return new ServiceResponse(invoke.Id, GetNullableTaskResult(task), null);
            }}
            catch (Exception ex)
            {{
                return new ServiceResponse(invoke.Id, null, ex);
            }}
        }}
    }}
{GenerateNamespaceEnd()}
";
    }
}
