// filename: TestApp.Services.IMyService.MyServiceHandler.g.cs

// <auto-generated />
using System;

using WolfRpc;
using WolfRpc.Services;
using WolfRpc.Abstractions;



namespace TestApp.Services.Generated
{
    public abstract class MyServiceHandler : WolfRpc.Service<TestApp.Services.IMyService>, TestApp.Services.IMyService
    {
        public override ulong Id => 11395189442894205029;

        public abstract Task<string> Hello();

        public abstract Task<string> Hello(string who);

        public override async Task<IInvokeResponse> InvokeAsync(IInvokeRequest invoke)
        {
            if (invoke.Service != this.Id)
            {
                throw new InvalidOperationException("Service mismatch");
            }

            var valid = invoke.Method switch 
            {
                17120663456437455126 => invoke.Arguments.Length == 0,
                9945383535167715693 => invoke.Arguments.Length == 1,
                _ => throw new InvalidOperationException("Unknown service method"),
            };

            if (!valid)
            {
                throw new InvalidOperationException("Argument count mistmatch");
            }

            Task task = invoke.Method switch
            {
                17120663456437455126 => this.Hello(),
                9945383535167715693 => this.Hello(((string)(invoke.Arguments[0]))),
                _ => Task.FromException(new InvalidOperationException("Unknown service method"))
            };

            try
            {
                await task;
                return new ServiceResponse(invoke.Id, GetNullableTaskResult(task), null);
            }
            catch (Exception ex)
            {
                return new ServiceResponse(invoke.Id, null, ex);
            }
        }
    }
}

